import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { DescDialogComponent } from '../edit-dialog/desc-dialog/desc-dialog.component';
import { MeasurementDialogComponent } from '../edit-dialog/measurement-dialog/measurement-dialog.component';
import { PacksizeDialogComponent } from '../edit-dialog/packsize-dialog/packsize-dialog.component';
import { QuantityDialogComponent } from '../edit-dialog/quantity-dialog/quantity-dialog.component';
import { SpecificGravityDialogComponent } from '../edit-dialog/specific-gravity-dialog/specific-gravity-dialog.component';
import { StockService } from '../services/stock.service';
import { Stock } from '../shared/models/stock.model';
import * as XLSX from 'xlsx';
import { ActivatedRoute, Router } from '@angular/router';
import { Company } from '../shared/models/company.model';
import { MatSnackBar } from '@angular/material/snack-bar';


@Component({
  selector: 'app-viewstock',
  templateUrl: './viewstock.component.html',
  styleUrls: ['./viewstock.component.scss']
})
export class ViewstockComponent implements OnInit {
  @ViewChild('searchbar') searchbar!: ElementRef;
  searchText			     = '';
  toggleSearch: boolean   = false;

  stocks: Stock[]      = [];
  companies: Company[] = [];
  company              = new Company();
  stock                = new Stock();
  currentTab: string = "";
  fileName: string     = "batchReport.xlsx";

  exportexcel() : void {
    let element = document.getElementById('tableClass1'); 
    const ws: XLSX.WorkSheet =XLSX.utils.table_to_sheet(element);

    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');

    XLSX.writeFile(wb, this.fileName);
  }

  constructor(private stockService: StockService, 
    private dialog: MatDialog, 
    private router: Router, 
    private route: ActivatedRoute, 
    private _snackBar: MatSnackBar) { 
  }

  /*
    Removal of Redundant code,
    Solution to back-end error generated by cancel event
  */

  openSnackBar(message: any) {
    this._snackBar.open(message, "Close", {
      duration: 4000,
    });
  }  

  ngOnInit(): void {
    this.getStock();
    this.getCompany();
  }

  getCompany() : void {
    this.stockService.getCompanies().subscribe(
      _id => {
        this.companies = _id
      },
      error => {
        console.log(error);
        this.openSnackBar("Error Retrieving Companies.")
      }
    )
  }

  fil(_id: string) : void {
    this.stockService.fil(_id).subscribe(
      data => {
        this.stocks = data
      },
      err => {
        console.log(err)
        this.openSnackBar("Error Retrieving Stocks");
      }
    )
  }

  onTabClick(event: any) {
    // console.log(event);
    // console.log(event.tab);
    // console.log(event.tab.ariaLabel)
    
    this.currentTab = event.tab.ariaLabel;

    
    if (event.tab.ariaLabel == undefined || event.tab.ariaLabel == "") {
      this.getStock();
    }
    else {
      this.fil(event.tab.ariaLabel);
    }
  }

  getStock(): void {
    this.stockService.getStock().subscribe(
      data => {
        this.stocks = data
        
      },
      error => {
        console.log(error)
        this.openSnackBar("Error Retrieving Stocks")
      }
    )
  }
  

  OpenDescDialog(obj: any) {
    const dialogRef = this.dialog.open(DescDialogComponent, {
      width: '100%',
      data:obj
    });

    dialogRef.afterClosed().subscribe(result => {
      this.UpdateDesc(result);
    })
  }

  DeleteStock(stock: Stock): void {
    if (window.confirm('Are you sure you want to permanently delete this record?')) {
      this.stockService.deleteStock(stock).subscribe(
        () => {
          if (this.currentTab == undefined || this.currentTab == "") {
            this.getStock()
          }
          else {
            this.fil(this.currentTab)
          }
        },
        err => {
          console.log(err)
          this.openSnackBar("Error Deleting Stock, Try Again.")
        }
      )
    }
  }

  UpdateDesc(stock: Stock): void {
    this.stockService.patchDescription(stock).subscribe(
    () => {
      this.stock = stock;
      if (this.currentTab == undefined || this.currentTab == "") {
        this.getStock()
      }
      else {
        this.fil(this.currentTab)
      }
    },
    error => {
        console.log(error)
        this.openSnackBar("Error Updating Description")
      }
    );
  }

  OpenPackDialog(obj : any) {
    const dialogRef = this.dialog.open(PacksizeDialogComponent, {
      width: '100%',
      data:obj
    });

    dialogRef.afterClosed().subscribe(result => {
      this.UpdatePack(result);
    })
  }

  UpdatePack(stock: Stock) : void {
    this.stockService.patchPack(stock).subscribe(
      () => {
        this.stock = stock;
        if (this.currentTab == undefined || this.currentTab == "") {
          this.getStock()
        }
        else {
          this.fil(this.currentTab)
        }
      },
      error => {
        console.log(error);
        this.openSnackBar("Error Updating Pack Size")
      }
    )
  }

  OpenQuantityDialog(obj : any) {
    const dialogRef = this.dialog.open(QuantityDialogComponent, {
      width: '100%',
      data: obj
    });

    dialogRef.afterClosed().subscribe(result => {
      this.UpdateQuant(result);
    })
  }

  UpdateQuant(stock: Stock) : void {
      this.stockService.patchQuantity(stock).subscribe(
        () => {
          this.stock = stock;
          if (this.currentTab == undefined || this.currentTab == "") {
            this.getStock()
          }
          else {
            this.fil(this.currentTab);
          }
        },
        error => {
          console.log(error);
          this.openSnackBar("Error Updating Quantity")
        }
      )
  }

  OpenMeasurementDialog(obj : any) {
    const dialogRef = this.dialog.open(MeasurementDialogComponent, {
      width: '100%',
      data: obj
    });

    dialogRef.afterClosed().subscribe(result => {
      this.UpdateMeasurement(result);
    })
  }

  UpdateMeasurement(stock: Stock) : void {
    this.stockService.patchMeasurement(stock).subscribe(
      () => {
        this.stock = stock;
        if (this.currentTab == undefined || this.currentTab == "") {
          this.getStock();
        }
        else {
          this.fil(this.currentTab);
        }
      },
      error => {
        console.log(error);
        this.openSnackBar("Error Updating Measurement");
      }
    )
  }
  
  OpenSGDialog(obj : any) {
    const DialogRef = this.dialog.open(SpecificGravityDialogComponent, {
      width: '100%',
      data: obj
    });

    DialogRef.afterClosed().subscribe( result => {
      this.UpdateSG(result);
    })
  }

  UpdateSG(stock: Stock) : void {
    this.stockService.patchSG(stock).subscribe(
      () => {
        this.stock = stock;
        if (this.currentTab == undefined || this.currentTab == "") {
          this.getStock()
        }
        else {
          this.fil(this.currentTab)
        }
      },
      error => {
        console.log(error);
        this.openSnackBar("Error Updating SG");
      }
    )
  }

}
